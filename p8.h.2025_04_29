///////////////////////////////////////////////////////////////
// I UNDERSTAND THAT COPYING PROGRAMS FROM OTHERS WILL BE DEALT
// WITH DISCIPLINARY RULES OF CCNY.
// STUDENT NAME: UMIT UYAR
// LOGIN_NAME: ee259
// EE259 SECTION (DAY/EVE): BOTH
///////////////////////////////////////////////////////////////
//
//THIS IS SAMPLE P8
//
#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <ctype.h>

using namespace std;

ofstream o_f_8("output_8.txt", ios::out);

class EZ_DIFF_INTEGRATE
{
   public:
	EZ_DIFF_INTEGRATE(char *); // constructor; 
		// example: s.EZ_DIFF_INTEGRATE("in.txt");
		// input data file is given;

	void EZ_DIFF_BY_ME(float, float, int);
		// example: s.EZ_DIFF_BY_ME(a, b, n);
		// differentiate the function defined in input file;
		
	void EZ_INTEG_BY_ME(float, float, int);
		// example: s.EZ_INTEG_BY_ME(a, b, n);
		// integrate the function defined in input file;
		
   private:
	int np; // number of data pairs
	char func_type[10]; // sin, cos, or poly
	int exp; // exponent of sin or cos 
	int arg; // argument to include in function
};

EZ_DIFF_INTEGRATE::EZ_DIFF_INTEGRATE(char * in_fn)
{
	ifstream i_f(in_fn, ios::in);
	char TYPE[10];
	char char_tempo[10]; // temp var to hold a string;
	//string str_tempo; // temp var to hold a string;
	int i_tempo; // temp var to hold an integer;

	o_f_8 << "CONSTRUCTOR WITH INPUT FILE: " << in_fn << endl;
	cout << "CONSTRUCTOR WITH INPUT FILE: " << in_fn << endl;
	// start parsing the input:
	i_f >> TYPE;
	cout << "1. I just read: " << TYPE << endl;
	if (strcmp(TYPE, "sin") == 0 || strcmp(TYPE, "cos") == 0)
	{
		strcpy(func_type, TYPE);
	}
	else
	{
		cout << "some error after checking sin or cos" << endl;
		return;
	}
	i_f >> char_tempo;
	cout << "2. I just read: " << char_tempo << endl;
	if (strcmp(char_tempo,"(") == 0)
	{
		exp = 1;
		i_f >> i_tempo;
		cout << "2.5. I just read: " << i_tempo << endl;
		arg = i_tempo;
	}
	//else if (strcmp(TYPE,"**") == 0)
	else if (strcmp(char_tempo,"**") == 0)
	{
		i_f >> i_tempo;
		cout << "2.52. I just read: " << i_tempo << endl;
		exp = i_tempo;
		i_f >> char_tempo;
		if (strcmp(char_tempo,"(") == 0)
		cout << "2.53. I just read: " << char_tempo << endl;
		i_f >> i_tempo;
		cout << "2.54. I just read: " << i_tempo << endl;
		arg = i_tempo;
	}
	else
	{
		cout << "some error in exponent " << endl;
		return;
	}

	i_f >> char_tempo;
	cout << "3. I just read: " << char_tempo << endl;
	if (strcmp(char_tempo,"*") != 0)
	{
		cout << "some error after exponent" << endl;
		return;
	}
	i_f >> char_tempo;
	cout << "4. I just read: " << char_tempo << endl;
	if (strcmp(char_tempo,"x") != 0)
	{
		cout << "some error after exponent" << endl;
		return;
	}
	i_f >> char_tempo;
	cout << "5. I just read: " << char_tempo << endl;
	if (strcmp(char_tempo,")") != 0)
	{
		cout << "some error after exponent" << endl;
		return;
	}
	i_f >> char_tempo;
	cout << "6. I just read: " << char_tempo << endl;
	if (strcmp(char_tempo,";") != 0)
	{
		cout << "some error after exponent" << endl;
		return;
	}
	cout << "exp is: " << exp << "\targ is: " << arg << "\tfunc is: " << func_type << endl;
	cout << "I parsed the input file nicely;" << endl;

}

void
EZ_DIFF_INTEGRATE::EZ_DIFF_BY_ME(float a , float b, int n)
{
	int i;
	float x_new, x_old;
	float x[30]; // x coordinate;
	float df[30]; // first derivative;
	
	if (strcmp(func_type,"sin") == 0)
	{
		// your code to compute differentiation for sin:

	}
	else if (strcmp(func_type,"cos") == 0)
	{
		// your code to compute differentiation for cos:

	}

	// report extreme points:

}

void
EZ_DIFF_INTEGRATE::EZ_INTEG_BY_ME(float a , float b, int n)
{
	int i;
	float x_new, x_old;
	float x[30]; // x coordinate;
	float df[30]; // first derivative;
	float ddf[30]; // second derivative;
	float integral = 0.0;
	float coeff = 0.0;
	float new_term = 1.0;
	
	if (strcmp(func_type,"sin") == 0)
	{
		// your code to compute integration for sin:

	}
	else if (strcmp(func_type,"cos") == 0)
	{
		// your code to compute integration for cos:

	}
}
