\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                      \_
\_   THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINEERING DEPARTMENT    \_
\_                         EE259 PROGRAMMING FOR EE                     \_
\_                                                                      \_
\_                              PROJECT 8                               \_
\_                                                                      \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

PROJECT 8 DESCRIPTION:

Write a C++ class called EZ_DIFF_INTEGRATE to perform differentiation and
integration operations on given functions.

class EZ_DIFF_INTEGRATE
{
   public:
	EZ_DIFF_INTEGRATE(char *); // constructor; 
		// example: s.EZ_DIFF_INTEGRATE("in.txt");
		// input data file is given;

	void EZ_DIFF_BY_ME(float, float, int);
		// example: s.EZ_DIFF_BY_ME(a, b, n);
		// differentiate the function defined in input file;
		
	void EZ_INTEG_BY_ME(float, float, int);
		// example: s.EZ_INTEG_BY_ME(a, b, n);
		// integrate the function defined in input file;
		
   private:
	int np; // number of data pairs
	char func_type[10]; // sin, cos, or poly
	int exp; // exponent of sin or cos 
	int arg; // argument to include in function
	int input_error;
};

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The input file will contain the function to be used in the differentiation
or integration operation. The format of the input file is as follows:

	FUN_TYPE < ** EXP > ( ARG * X )

where FUN_TYPE is given as either "sin" or "cos" and the integers EXP and 
ARG represent exponent of the function and the argument to include in the 
function, respectively. The exponent part given in "< > " is optional.
Some examples of input file contents are:

	sin ( 2 * x ) ;	// FUN_TYPE = sin; EXP = 1; ARG = 2;
	sin ( 4 * x ) ;	// FUN_TYPE = sin; EXP = 1; ARG = 4;
	sin ** 2 ( 2 * x ) ;	// FUN_TYPE = sin; EXP = 2; ARG = 2;
	cos ** 4 ( 3 * x ) ;	// FUN_TYPE = cos; EXP = 4; ARG = 3;

There are spaces between any two entries in the input file.
Any other variation of the input file should generate input error.

The output of the constructor into output_8.tx file is:

	CONSTRUCTOR WITH INPUT FILE: file_name
	FUNCTION IS PARSED AS: FUN_TYPE ** EXP ARG X

where file_name is the character string as defined in the main function
to indicate the name of the file.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The method called EZ_DIFF_BY_ME is defined as follows:
		
		s.EZ_DIFF_BY_ME(a, b, n);

where floating point numbers a, and b the start and end points of the interval,
respectively, and integer n is the number divisions in the interval.

The expected output to output_8.txt file from the method is:

   *** THERE IS AN EXTREME POINT *** df[a_i]: v_i	df[a_i+1]: v_i+1
   ...
   *** THERE IS AN EXTREME POINT *** df[a_k]: v_a_k	df[a_k+1]: v_a_k+1
   THERE ARE w MINIMUMS AND y MAXIMUMS FOR THIS FUN_TYPE FUNCTION 
   IN THE INTERVAL OF a AND b WITH n POINTS. 

where v_a_i and v_a_i+1 are the differentiation values of the given
function at those points.  
You check for where v_a_i and v_a_i+k have opposite signs:
If v_i > 0 and v_i+1 < 0 then there is a maximum.  
Similarly, if v_i < 0 and v_i+1 > 0 then there is a minimum. 
For simplicity, if v_1 is zero, we assume a minimum (normally, we should 
then check the second derivatives and decide on saddle points).

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The method called EZ_INTEG_BY_ME is defined as follows:
		
		s.EZ_INTEG_BY_ME(a, b, n);

where floating point numbers a, and b the start and end points of the interval,
respectively, and integer n is the number divisions in the interval.

The expected output to output_8.txt file from the method is:

   THE INTEGRATION OF THIS FUN_TYPE FUNCTION 
   IN THE INTERVAL OF a AND b WITH n POINTS IS w

where w is the value of the integration operation applied to the given
function between a and b for n points.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
